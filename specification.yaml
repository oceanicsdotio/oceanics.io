openapi: "3.1.0"

info:

  title: "Oceanics.io"
  version: "3.0.0"
  description: |

    Oceanics.io is a graph-native store and registry for public and proprietary Ocean data. We ingest heterogenous sensor and simulation data and parse them into discoverable databases, accessible to both humans and machines. 
    
    You probably have to share data anyway. This software can enhance your data science and management experience by providing granular access control and provenance tracking based on open standards. 
    
    By assessing data and service availability over shared domain, projects can allocate resources to fill coverage gaps, share assets, and eliminate redundant operational and capital expenses.

  contact:
    name: Oceanicsdotio LLC
    url: http://www.oceanics.io
    email: data@oceanics.io

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

  x-logo:
    url: https://www.oceanics.io/logo.png

tags:

  - name: Catalog
    description: Access metadata about collections.

  - name: Collection
    description: Access groups of entities sharing a type.

  - name: Entity
    description: Manage a single entity or pair of entities.

  - name: Topology
    description: Create and access entity relationship metadata.

servers:
- url: https://www.oceanics.io/{basePath}
  description: Production API server
  variables:
    basePath:
      default: api
- url: https://localhost:8888/{basePath}
  description: Local development server
  variables:
    basePath:
      default: api

paths:
      
  /:
  
    get:
      tags: [ Catalog ]
      summary: Catalog Metadata
      security:
        - BearerAuth: []
      description: |
        Get all entity types in database as collections following the SpatioTemporal Asset Catalog specification

      parameters:

        - name: asset
          in: query
          schema:
            type: string
            default: index

        - name: extension
          description: |
            Any entity can be linked topologically to any other entity, but generally
            these are grouped in functional sets by application area:
            * `sensing` implements Open Geospatial Consortium SensorThings specification (part 1),
            and has models relevant to operating and getting data from sensor networks.
            * `tasking` builds off of the SensorThings specification part 2.
            * `mesh` implements structures for spatial simulations.

          in: query
          schema:
            type: string
            enum: [sensing, mesh, tasking, admin, catalog]

      responses:
        '200':
          description: Catalog

    post:
      tags: [Catalog]
      summary: Create Unique Constraint
      security:
        - BearerAuth: []
      description: |
        Add a unique constraint and node type. Even if no instances exist in the database,
        this will force the get index query to return labels.
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
          
    delete:
      tags: [Catalog]
      summary: Delete Catalog
      security:
        - BearerAuth: []
      description: |
        Delete all data connected to account.

      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'

  /{entity}:

    post:
      tags: [Entity, Collection]
      summary: Create Entity
      security:
        - BearerAuth: []
      description: |
        Create a new entity.
      parameters:
        - $ref: "#/components/parameters/entityClass"
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [Collection]
      summary: Collection Metadata
      security:
        - BearerAuth: []
      description: |
        Get all entities of one type. This can also take query string parameters for
        `offset` and `limit`, which enables paging with look-ahead, or infinite scroll
        if desired.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '404':
          $ref: '#/components/responses/NotFound'


  /{entity}({uuid}):

    get:
      tags: [ Entity ]
      summary: Entity Metadata
      security:
        - BearerAuth: []
      description: Get entity
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ Entity ]
      summary: Update Entity
      security:
        - BearerAuth: []
      description: Update entity
      requestBody:
        $ref: '#/components/requestBodies/Entity'

      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '200':
          $ref: '#/components/responses/Entity'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ Entity ]
      summary: Delete Entity
      security:
        - BearerAuth: []
      description: Delete entity and orphans recursively.
      parameters:
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"

      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'

  /{root}({rootId})/{entity}:

    get:
      tags: [ Topology, Entity, Collection ]
      summary: Connected Entities
      security:
        - BearerAuth: []
      description: |
        Get related entities. The underlying implementation is almost identical to
        that for getting base collections, except that this uses any data node as
        the root, instead of the authenticated user. Like other query handlers,
        this route supports `offset` and `limit` query parameters for client side
        paging or continuous scroll.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/label"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        '200':
          $ref: '#/components/responses/EntityCollection'
        '400':
          $ref: '#/components/responses/BadRequest'


  /{root}({rootId})/{entity}({uuid}):

    post:
      tags: [ Topology, Entity ]
      summary: Join Entity Pair
      security:
        - BearerAuth: []
      description: Create a labeled relationship between entities.
      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [ Topology, Entity ]
      summary: Drop Relationship
      security:
        - BearerAuth: []
      description: |
        Remove a labeled relationship between entities. If no `label` is specified, remove all
        relationships between the entities.

      parameters:
        - $ref: "#/components/parameters/root"
        - $ref: "#/components/parameters/rootId"
        - $ref: "#/components/parameters/entityClass"
        - $ref: "#/components/parameters/entityId"
        - $ref: "#/components/parameters/label"

      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'


components:

  securitySchemes:

    BearerAuth:
      type: http
      in: header
      scheme: bearer

  parameters:

    root:
      in: path
      required: true
      name: root
      description: |
        The class name of the root or parent entity that the request object is associated with. During a `GET` request
        this will be used to collect child entities based on graph relationship. For `PUT` and `POST` requests this
        and the child entities will be linked with a labeled relationship.

      schema:
        type: string

    rootId:
      in: path
      required: true
      name: rootId
      description: |
        Unique identifier of the parent entity.
      schema:
        type: string

    entityClass:
      in: path
      required: true
      name: entity
      description: |
        Name of the entity model to create or fetch.

      schema:
        type: string
        enum:
          - DataStreams
          - Observations
          - HistoricalLocations
          - Locations
          - Sensors
          - Things
          - ObservedProperties
          - Tasks
          - Actuators
          - TaskingCapabilities
          - FeaturesOfInterest
          - Collections

    entityId:
      in: path
      required: true
      name: uuid
      description: |
        Unique identifier of the resource to be retrieved.
      schema:
        type: string

    limit:
      in: query
      name: limit
      description: |
        The maximum number of nodes in the graph query response. This requires that the
        result be sorted in some way for consistent results. We sort by uuid v7, which
        means that records are return in approximately the order they were created. This
        is used with `offset` to enable continuous scroll and paging.
      schema: 
        type: number
        format: integer
        default: 10
        minimum: 1
        maximum: 100

    offset:
      in: query
      name: offset
      description: |
        The number of node that will skipped when return the graph query result. This means
        that the first record returned will be the next index. This is used in combination with
        `limit` to enable paging or continuous scroll.
      schema:
        type: number
        format: integer
        default: 0
        minimum: 0

    label:
      in: query
      name: label
      description: |
        Should be in format `LABEL`, although this is not strictly necessary. Labeled relationships
        are used to crawl over the graph.
      schema:
        type: string

    ObjectKey:
      in: path
      name: objectKey
      required: true
      description: UUID of experiment data
      schema:
        type: string

    ThingId:
      in: path
      name: thingId
      required: true
      description: Unique identifier of the object to copy.
      schema:
        type: integer
        minimum: 0

    configId:
      in: query
      name: configId
      description: |
        A reference to a model configuration can be used instead of supplying values for `runs`, `workers`, `dt`, and
        `days`.
      schema:
        type: integer

  requestBodies:

    Asset:
      description: |
        Tell the server where to find the data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'
          
    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionUpdate:
      description: |
        Relabel or index an entity collection

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionOptions'

    Entity:
      description: |
        Entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Things'
              - $ref: '#/components/schemas/Locations'
              - $ref: '#/components/schemas/HistoricalLocations'
              - $ref: '#/components/schemas/DataStreams'
              - $ref: '#/components/schemas/Observations'
              - $ref: '#/components/schemas/ObservedProperties'
              - $ref: '#/components/schemas/Sensors'
              - $ref: '#/components/schemas/FeaturesOfInterest'
              - $ref: '#/components/schemas/Collection'

  responses:

    Asset:
      description: |
        Description of the file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Collection:
      description: Collection
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Entity:
      description: |
        Single entity
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Things'
              - $ref: '#/components/schemas/Locations'
              - $ref: '#/components/schemas/HistoricalLocations'
              - $ref: '#/components/schemas/DataStreams'
              - $ref: '#/components/schemas/Observations'
              - $ref: '#/components/schemas/ObservedProperties'
              - $ref: '#/components/schemas/Sensors'
              - $ref: '#/components/schemas/FeaturesOfInterest'

    EntityCollection:
      description: |
        Collection of entities

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityCollection'
    Message:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
                
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TokenResponse:
      description: Auth token
      content:
        application/json:
          schema:
            type: object
            properties:

              token:
                description: JWT Bearer token containing user ID
                type: string
                minLength: 127

              duration:
                type: integer
                description: JWT expiration interval in seconds
                default: 600
                minimum: 30
                maximum: 3600

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:

    Agents:
      examples:
        - name: Arthur Machen
        - name: Octavia Butler
      type: object
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.
            
    Asset:
      type: object

    CollectionOptions:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:

            label:
              $ref: '#/components/schemas/EntityLabel'

            indexBy:
              type: string
              default: id
              enum:
                - id
                - location
                - ts
              description: |
                Node attribute to create an index on.

    EntityLabel:
      type: string
      enum:
        - Proxy
        - Buoy
        - Server
        - Metadata
        - File
        - Raw
      description: |
        Additional node labels that can be applied to entities, which have internal meaning.

    Message:
      type: object
      properties:
        message:
          type: string
          description: Status message

    Index:
      type: string
      description: Class name of entities to index.

    SecretKey:
      description: |
        Your secret key is used to encrypt traffic and private data, such as your login credentials. If you do not
        provide your own key, a default secret will be used. If you do provide a secret key, make sure to save it.
        It is not possible for us to recover data encrypted with a user secret.

      type: string

    EntityCollection:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            "@iot.count":
              type: integer
              minimum: 1
              maximum: 100
              description: Total number of records in the response
            value:
              type: array
              description: Array of response data
              items:
                oneOf:
                  - $ref: '#/components/schemas/Things'
                  - $ref: '#/components/schemas/Locations'
                  - $ref: '#/components/schemas/HistoricalLocations'
                  - $ref: '#/components/schemas/DataStreams'
                  - $ref: '#/components/schemas/Observations'
                  - $ref: '#/components/schemas/ObservedProperties'
                  - $ref: '#/components/schemas/Sensors'
                  - $ref: '#/components/schemas/FeaturesOfInterest'
        

    EntityClass:
      type: string
      enum:
        - DataStreams
        - FeaturesOfInterest
        - Locations
        - Observations
        - ObservedProperties
        - Sensors
        - Things
        - Collections
        - Actuators
        - TaskingCapabilities
        - Tasks

    FeaturesOfInterest:
      examples:
        - name: Damariscotta River Estuary shellfish production
          description: Dynamics of a traditional growing area for oysters in Maine.
      type: object
      title: FeaturesOfInterest
      description: |
        `FeaturesOfInterest` are similar to `Locations`, in that they are spatial phenomena. However, 
        they may be poorly defined in space and time, and therefore are represented through linked 
        `Observations`. 
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: Globally unique identifier for `FeaturesOfInterest`.
        name:
          type:
            - "string"
            - "null"
          description: Human readable name for displaying data. This may change over time.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        encodingType:
          type: string
          description: Identifier for parsing feature data

        feature:
          type: object
          description: Feature data

        Observations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

    Things:
      title: "Things"
      examples:
        - name: Sealab
          description: A research institution located offshore.
        - name: R/V Lloigor
          description: A regional class research vessel operating in the Gulf of Maine.

      type: object
      description: |
        `Things` are objects of the physical or information world that can be identified
        and integrated into communication networks. These are related to `DataStreams`, `Locations`,
        and `HistoricalLocations`. `Things` should only have a one location at a time, while past and future coordinates are related through `HistoricalLocations`. To get information about `ObservedProperties` or connected `Sensors`, you need to perform topological queries. In the
        web interface this is done behind the scenes.
      required: [uuid, name]
      additionalProperties: false
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier. This is usually auto-generated, 
            but different than the default node IDs within the Neo4j database, 
            since those are not guaranteed to persist.
        name:
          type:
            - "string"
            - "null"
          description: |
            Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: |
            Short but useful explanation of what the entity is.

        properties:
          type:
            - object
            - "null"
          description: Key-value properties

        HistoricalLocations@iot.navigation:
          readOnly: true
          oneOf:
            - type: "null"
            - type: array
              title: references
              items:
                type: string
                format: url
            - type: array
              title: objects
              items:
                type: object

        Locations@iot.navigation:
          readOnly: true
          oneOf:
            - type: "null"
            - type: array
              title: references
              items:
                type: string
                format: url
            - type: array
              title: objects
              items:
                type: object

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:
            - type: "null"
            - type: array
              title: references
              items:
                type: string
                format: url
            - type: array
              title: objects
              items:
                type: object

    Locations:
      examples:
        - name: Lower Damariscotta
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -69.58344, 43.93354 ]
        - name: Upper Damariscotta Estuary
          encodingType: application/vnd.geo+json
          description: Buoy deployment
          location:
            type: Point
            coordinates: [ -69.5425, 43.9981 ]
        - name: Wood Island Harbor
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -70.3444, 43.4565 ]
        - name: Ram Island Saco Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -70.3596, 43.4659 ]
        - name: Bombazine Island
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -69.8984, 43.8636 ]
        - name: Sand Cove
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -69.8919, 43.7764 ]
        - name: Bagaduce River
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -68.7738, 44.4015 ]
        - name: Machias Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -67.3180, 44.6185 ]
        - name: Cobscook Bay
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -67.0651, 44.8968 ]
        - name: Western Passage
          encodingType: application/vnd.geo+json
          location:
            type: Point
            coordinates: [ -66.9958, 44.9201 ]
      type: object
      title: Locations
      description: |
        `Locations` usually store information about the last known position of `Things`. 
        Though these may no longer be current, they are distinct from `HistoricalLocations`, 
        which are known to no longer be an accurate estimate. We also use `Locations` to 
        represent prospective, planned and predicted positions, which departs from the
        SensorThings standard.
        
        These are commonly linked with `Things` and `HistoricalLocations`. `Things` 
        do not have a location property, so when they need to be visualized in a spatial context
        it is necessary to use a topological query to retrieve connected `Locations`.
      additionalProperties: false
      required: [uuid, location, encodingType]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier in UUID format. The API expects an external identifier, and does
            not pass back any information other than the success or failure status of the
            operation. The web interface implements UUID generation with the v7 algorithm, so
            that they can be used as sortable database keys.
        name:
          type:
            - "string"
            - "null"
          description: |
            Human readable name for search and display of `Locations` data. While you
            may opt to encode information in the name, we recommend encoding these instead
            in location properties and topology.
        description:
          type:
            - "string"
            - "null"
          description: |
            Brief explanation of what the `Locations` is. This could
            include the source for manually input locations, annotations
            about hazards or operational constraints, or any other information
            you or other may find helpful.
        encodingType:
          type: string
          enum:
            - "application/vnd.geo+json"
          default: "application/vnd.geo+json"
          description: |
            The encoding rendered in the location response. We support
            GeoJSON in the user facing web interface and API. The underlying
            implementation for storage, transmission, and processing varies
            across services.
        location:
          type: object
          additionalProperties: false
          properties:
            type:
              type: string
              description: |
                The type of geometry, limited to values we know how to process. 
                This includes `Point` and `MultiPolygon` geometries. The web interface
                only allows `Point` coordinates in form inputs, but arbitrarily complex
                geometries can be created through the API.
              enum: ["Point", "MultiPolygon", "MultiPoint"]
              default: "Point"
            coordinates:
              oneOf:
                - type: array
                  description: |
                    Spatial coordinates. Need the type and encoding to be sure how to interpret.
                  minLength: 2
                  maxLength: 3
                  items:
                    type: number
                    format: float
                - type: array
                  description: |
                    Spatial coordinates. Need the type and encoding to be sure how to interpret.
                  minLength: 0
                  items:
                    type: array
                    items:
                      type: array
        HistoricalLocations@iot.navigation:
          readOnly: true
          oneOf:
            - type: array
              title: references
              items:
                type: string
            - type: array
              title: objects
              items:
                type: object
        Things@iot.navigation:
          readOnly: true
          oneOf:
            - type: array
              title: references
              items:
                type: string
            - type: array
              title: objects
              items:
                type: object

    HistoricalLocations:
      examples:
       - time: "2020-04-01T09:00:00Z"
         Things@iot.navigation:
          - name: [ R/V Lloigor ]
         Locations@iot.navigation:
          - name: [ Wood Island Harbor ]

      type: object
      title: HistoricalLocations
      additionalProperties: false
      description: |
        `HistoricalLocations` create a timestamped relationship between `Locations`,
        and `Things`, which move over time. This allows you to use either position or time
        to query related data in the graph.
      required: [ uuid, time ]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        time:
          type: string
          format: date-time
          description: Timestamp when the location was current

        Things@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              maxItems: 1
              items:
                type: object

        Locations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object

    Sensors:
      examples:
        - name: SeaBird Electronics CTD
          description: A common oceanographic sensing package
        - name: Chlorophyll fluorometer
          description: For measuring plankton stuff
      type: object
      title: Sensors
      description: |
        `Sensors` contain technical and codec data about `DataStreams`. You might think
        they are connected to `Things`, and they are, but only through multi-segment links.
        These are also not individual devices, but standardized product lines. Therefore
        `Sensors` refer to all like devices, across multiple organizations, are not suitable
        for storing information about the status of single devices.
      additionalProperties: false
      required: [ uuid, name ]
      properties:

        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for `Sensors`. When these are generated within our system they use the
            version 7 algorithm, which means they are sorted by creation time.

        name:
          type:
            - "string"
            - "null"
          description: |
            Human readable name for `Sensors`.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        encodingType:
          type: string
          description: |
            Explains the format of `metadata`.
          enum: [application/pdf, "http://www.opengis.net/doc/IS/SensorML/2.0"]
          default: "http://www.opengis.net/doc/IS/SensorML/2.0"

        metadata:
          type: object
          description: |
            Metadata about the sensor. Contents are described by the `encodingType`
            property.

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

    DataStreams:
      examples:
        - Things@iot.navigation:
            - name: [ Land Ocean Biogeochemical Observatory ]
          Sensors@iot.navigation:
            - name: [ SeaBird Electronics CTD ]
          ObservedProperties@iot.navigation:
            - name: [ temperature ]
          name: temperature
          description: An example synthetic temperature series
        - Things@iot.navigation:
            - name: [ Land Ocean Biogeochemical Observatory ]
          ObservedProperties@iot.navigation:
            - name: [ chlorophyll ]
          name: chlorophyll
          description: Just another chlorophyll series
      type: object
      title: DataStreams
      description: |
        `DataStreams` are collections of `Observations` from the same `Sensors`. These time series
        are one of the central models, and connect many of the other nodes. 
        We support in browser data visualization and analysis.
      additionalProperties: false
      required: [ uuid, name ]
      properties:

        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier across `DataStreams` and all other
            types of entity.

        name:
          type:
            - "string"
            - "null"
          description: |
            Human readable `DataStreams` name for displaying data. 
            This need not be unique, but it is helpful if it is.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        unitOfMeasurement:
          type: object
          description: |
            Unified Code for Unit of Measure

          properties:
            name:
              type: string
              description: Name for matching and displaying

            symbol:
              type:
                - "string"
                - "null"
              description: Abbreviation for the parameter

            definition:
              type:
                - "string"
                - "null"
              description: A link to a formal definition

        observationType:
          type:
            - "string"
            - "null"
          description: |
            Data model of child `Observations`. Usually an `OM_Measurement`.
          enum:
            - "OM_CategoryObservation"
            - "OM_CountObservation"
            - "OM_Measurement"
            - "OM_Observation"
            - "OM_TruthObservation"

        observedArea:
          type: [object, "null"]
          readOnly: true
          description: |
            The bounding box that encloses all `FeaturesOfInterest` referenced by child `Observations`

        phenomenonTime:
          type: array
          description: |
            Time interval of the measured process, consisting of two ISO8601 timestamps.
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time

        resultTime:
          type: array
          description: |
            Time interval of receiving data, consisting of two ISO8601 timestamps. May be different than the
            measured process, due to batch uploads, latency, lack of real-time clocks in devices, etc.
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time

        Observations@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              items:
                type: string

            - type: array
              title: objects
              items:
                type: object

        ObservedProperties@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object

        Sensors@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object

        Things@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              minItems: 1
              items:
                type: string

            - type: array
              title: objects
              minItems: 1
              items:
                type: object


    Observations:
      examples: 
        - DataStreams@iot.navigation:
            - name: [ temperature ]
          resultTime: "2020-04-01T09:00:00Z"
          result: 10.0

        - DataStreams@iot.navigation:
            - name: [ temperature ]
          resultTime: "2018-04-01T09:45:00Z"
          result: 11.7
      type: object
      title: Observations
      description: |
        `Observations` are connecting nodes in a multi-segment path between `DataStreams` 
        and `FeaturesOfInterest`. You might want to directly access this resource for
        data annotation or correction.
      additionalProperties: false
      required: [uuid, resultTime, result]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        resultTime:
          type: string
          format: date-time
          description: |
            Timestamp when the `Observation` was registered by the system.

        resultQuality:
          type: string
          description: |
            Quality of the result described as a `DQ_Element` (OGC)

        validTime:
          type: array
          description: Time interval when the result is valid
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time

        phenomenonTime:
          type: string
          format: date-time
          description: |
            Timestamp of the acquisition of the `Observation`

        result:
          description: The result of the observation. Usually a number.
          type: number
          format: float

        parameters:
          type: object
          description: Environmental conditions during the `Observation`

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              maxItems: 1
              items:
                type: object

        FeaturesOfInterest@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              maxItems: 1
              items:
                type: object

    Tasks:
      examples:
        - Locations@iot.navigation:
            - name: [Wharf]
          name: Do a thing
        - Locations@iot.navigation:
            - name: [Wharf]
          name: Fix me
        - Locations@iot.navigation:
            - name: [Farm]
          name: Harvest
      type: object
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.
        Locations@iot.navigation:
          readOnly: true
          oneOf:
            - type: array
              title: references or objects
              maxItems: 1
              items:
                oneOf: 
                  - type: string
                  - type: object
        TaskingCapabilities@iot.navigation:
          readOnly: true
          oneOf:
            - type: array
              title: references or objects
              maxItems: 1
              items:
                oneOf: 
                  - type: string
                  - type: object
        
    ObservedProperties:
      examples:
        - name: colored dissolved organic matter
          description: Optically active material suspended in water
        - name: salinity
          description: Seawater salinity
        - name: temperature
          description: Measured through a thermistor or remote sensing
        - name: chlorophyll
          description: Measure of chlorophyll
        - name: oxygen
        - name: oxygen percent
        - name: transmission
        - name: oxygen saturation
        - name: conductivity
        - name: photosynthetically active radiation
        - name: turbidity
        - name: voltage
          description: Electrical voltage or sensor or power source
        - name: water velocity

      type: object
      title: ObservedProperties
      description: |
        `ObservedProperties` describe `DataStreams`.
      additionalProperties: false
      required: [uuid, name]
      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        definition:
          type:
            - "string"
            - "null"
          description: Reference to resource that defines the property.

        DataStreams@iot.navigation:
          readOnly: true
          oneOf:

            - type: array
              title: references
              maxItems: 1
              items:
                type: string

            - type: array
              title: objects
              maxItems: 1
              items:
                type: object

    Collection:
      title: stacCollection
      examples:
        - name: Oysters
          description: Oyster data
          license:
          version: 1
          keywords: oysters,aquaculture,Maine,ShellSIM
        - name: Limited purpose aquaculture sites
          description: Temporary sites with a small footprint
      type: object
      description: |
        SpatioTemporal Asset Catalog object-linking collection object. Collections are generic, while some
        SensorThings entities are special Collections. For instance, a `DataStreams` is a collection of
        `Observations`.

      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        extent:
          $ref: '#/components/schemas/Extent'

    Extent:
      title: extent
      type: [object, "null"]
      readOnly: true
      description: |
        Spatiotemporal extent of a data `Collection`. Contains a 2 or 3-D `spatial` extent, and a `temporal`
        interval.

      properties:

        spatial:
          type: array
          minLength: 4
          maxLength: 6
          items:
            type: number
            format: float

        temporal:
          type: string
          description: ISO format timestamp interval


    Provider:
      title: dataProvider
      examples:
        - name: Public
          description: Public Data Repository
        - name: Oceanicsdotio
          description: Research and development
          domain: oceanics.io
          owner: true
      type: object
      description: |
        Data providers are organizations or individuals that produce, process, host, or license data.

      properties:
        uuid:
          type: string
          format: uuid
          description: |
            Unique identifier for entity.

        name:
          type:
            - "string"
            - "null"
          description: Human readable entity name for displaying data.

        description:
          type:
            - "string"
            - "null"
          description: Short but useful explanation of what the entity is.

        url:
          type: string
          description: URL to organization website

        roles:
          type: array
          description: |
            Data providers are labeled with a role, so that attribution and redaction works properly on synthesized
            datasets.
          items:
            title: providerRole
            type: string
            enum:
              - licensor
              - producer
              - processor
              - host

    Error:
      type: object
      properties:
        message:
            type: string
